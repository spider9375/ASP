@page "/upload"
@using System.Collections.Generic;
@using Data.Enums;  
@inject IDealershipService dealershipService;
@inject IMappingService mappingService;

<h1>Импорт на автокъща</h1>
<div class="drag-drop-zone">
    <InputFile OnChange="UploadSchema" />
    @uploadSchemaStatus
</div>
@if (schemas.Count > 0)
{
    <div class="drag-drop-zone">
    
        <InputFile multiple OnChange="HandleSelection" />
        @status
    </div>
}



@if (selectedFiles != null)
{
    <div>
        <button class="btn-primary" @onclick="@(() => UploadAll())">Прикачи всички</button>
    </div>
    foreach (var file in selectedFiles)
    {
        <div class="file-row">
            <!-- File info -->
            <div>
                <h2>@file.Name</h2>
                Размер: <strong>@file.Size bytes</strong>;
                Последно променен: <strong>@file.LastModified.ToShortDateString()</strong>;
                Тип: <strong>@file.Type</strong>
            </div>
            @if (UploadStatus.Failed == fileUploadedDictionary[file.Name])
            {
                <div>
                    <h5 class="text-danger">Файлът има грешки:</h5>
                </div>
                <div>
                    <p class="text-danger">@schemaValidationErrors[file.Name]</p>
                </div>
            }

            <!-- Upload button -->
            <button @onclick="() => UploadFile(file)" disabled="@(UploadStatus.Failed == fileUploadedDictionary[file.Name] || UploadStatus.Uploaded == fileUploadedDictionary[file.Name])">
                @if ((UploadStatus.Pending == fileUploadedDictionary[file.Name]))
                {
                    <span>Импорт</span>
                }
                else if ((UploadStatus.Uploaded == fileUploadedDictionary[file.Name]))
                {
                    <span>Импортирано @((100.0 * file.Data.Position / file.Size).ToString("0"))%</span>
                }
                else if ((UploadStatus.Failed == fileUploadedDictionary[file.Name]))
                {
                    <span>Невалидно</span>
                }
            </button>
        </div>
    }
}

@code {
    List<IFileListEntry> selectedFiles = new List<IFileListEntry>();
    Dictionary<string, UploadStatus> fileUploadedDictionary = new Dictionary<string, UploadStatus>();

    void HandleSelection(IFileListEntry[] files)
    {
        foreach (var file in files)
        {
            if (fileUploadedDictionary.ContainsKey(file.Name))
            {
                var existingFile = this.selectedFiles.Find(x => x.Name == file.Name);
                selectedFiles.Remove(existingFile);
                fileUploadedDictionary[file.Name] = UploadStatus.Pending;
            }
            else
            {
                fileUploadedDictionary.Add(file.Name, UploadStatus.Pending);
            }
        }

        selectedFiles.AddRange(files);
    }

    const string DefaultStatus = "Пуснете файл тук, или кликнете, за да изберете файл/ове";
    const string DefaultUploadSchemaStatus = "Импорт на схема";
    XmlSerializer serializer = new XmlSerializer(typeof(DealershipModel));
    XmlSchemaSet schemas = new XmlSchemaSet();
    Dictionary<string, string> schemaValidationErrors = new Dictionary<string, string>();
    const int MaxFileSize = 5 * 1024 * 1024; // 5MB
    string status = DefaultStatus;
    string uploadSchemaStatus = DefaultUploadSchemaStatus;

    protected override void OnInitialized()
    {
        this.schemas = this.dealershipService.GetSchemaSet();
        if (schemas.Count == 0)
        {
            this.uploadSchemaStatus = "Ипортирай схема";
        }
        else
        {
            this.uploadSchemaStatus = "Схемата е заредена от базата";
        }
    }

    async Task UploadAll()
    {
        Dictionary<string, Data.Models.DealershipModel> validModels = new Dictionary<string, Data.Models.DealershipModel>();

        foreach (var file in this.selectedFiles)
        {
            var validModel = await this.Validate(file);
            if (validModel != null)
            {
                validModels.Add(file.Name, validModel);
            }
        }

        this.dealershipService.Add(validModels.Values.ToList());
        foreach (var item in validModels)
        {
            fileUploadedDictionary[item.Key] = UploadStatus.Uploaded;
        }
    }

    async Task UploadSchema(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file.Name.Contains(".xsd"))
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            var xmlReader = this.dealershipService.UploadSchema(ms);

            schemas.Add(@"https://www.w3schools.com", xmlReader);

            this.uploadSchemaStatus = "Схемата импортирана успешно";
        }

    }

    private async Task<Data.Models.DealershipModel> Validate(IFileListEntry file)
    {
        var ms = new MemoryStream();
        await file.Data.CopyToAsync(ms);
        string str = System.Text.Encoding.UTF8.GetString(ms.ToArray());
        var xmlReader = XmlReader.Create(new StringReader(str));

        XmlSerializer ser = new XmlSerializer(typeof(DealershipModel));
        var xml = (DealershipModel)serializer.Deserialize(xmlReader);
        XDocument doc = XDocument.Parse(str);

        string msg = $"";
        doc.Validate(schemas, (o, e) =>
        {
            msg += e.Message + Environment.NewLine;
        });

        if (msg.Length > 0)
        {
            this.schemaValidationErrors.Add(file.Name, msg);
            fileUploadedDictionary[file.Name] = UploadStatus.Failed;

            return null;
        }
        else
        {
            this.schemaValidationErrors.Remove(file.Name);
            return this.mappingService.XmlToModel(xml);
        }
    }

    async Task UploadFile(IFileListEntry file)
    {
        var validatedModel = await Validate(file);

        if (validatedModel != null)
        {
            this.dealershipService.Add(validatedModel);
            fileUploadedDictionary[file.Name] = UploadStatus.Uploaded;
        }
    }

    async Task<XmlReader> LoadFile(IFileListEntry file)
    {
        // So the UI updates to show progress
        file.OnDataRead += (sender, eventArgs) => InvokeAsync(StateHasChanged);

        // Just load into .NET memory to show it can be done
        // Alternatively it could be saved to disk, or parsed in memory, or similar
        var ms = new MemoryStream();
        await file.Data.CopyToAsync(ms);
        string str = System.Text.Encoding.UTF8.GetString(ms.ToArray());
        var xmlReader = XmlReader.Create(new StringReader(str));

        return xmlReader;
    }
}
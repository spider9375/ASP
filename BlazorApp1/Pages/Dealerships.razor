@page "/dealerships"

@using BlazorApp1.Data.Interfaces;
@using BlazorApp1.Data.ViewModels;
@inject IDealershipService DealershipService;
@inject NavigationManager NavigationManager;
@inject IMappingService mappingService;
@inject IJSRuntime js; 

<h1>Автокъщи</h1>

<div class="row">
    <div class="col-12">
        <button @onclick="@(e => NavigationManager.NavigateTo("create"))" class="btn-success btn-block" disabled="@(!this.hasSchema)">Създай</button>
    </div>
</div>

@if (dealerships == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>№</th>
                <th>Адрес</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dealership in dealerships)
            {
                <tr>
                    <td>@dealership.Id</td>
                    <td>@dealership.Address</td>
                    <td>
                        <a href="/dealership/@dealership.Id"><i class="glyphicon glyphicon-search"></i></a>
                        <span><i @onclick="@(e => Delete(dealership.Id))" class="glyphicon glyphicon-remove"></i></span>
                        <a href="/edit/@dealership.Id"><i class="glyphicon glyphicon-edit"></i></a>
                        <span><i @onclick="@(e => Download(dealership.Id))" class="glyphicon glyphicon-download-alt"></i></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DealershipViewModel> dealerships;
    private bool hasSchema { get; set; }

    protected override void OnInitialized()
    {
        this.dealerships = this.DealershipService.GetDealershipDataTable();
        this.hasSchema = this.DealershipService.GetSchemaSet().Count > 0;
    }

    private void Delete(int id)
    {
        this.DealershipService.Delete(id);
        this.dealerships = this.DealershipService.GetDealershipDataTable();
    }

    private void Download(int id)
    {
        var dealership = this.DealershipService.Get(id);

        var xmlModel = this.mappingService.ModelToXml(dealership);

        XmlSerializer serializer = new XmlSerializer(typeof(DealershipModel));
        string xml;

        using (var sww = new StringWriter())
        {
            using (XmlWriter writer = new XmlTextWriter(sww) { Formatting = Formatting.Indented })
            {
                serializer.Serialize(writer, xmlModel);
                xml = sww.ToString(); // Your XML
            }
        }


        js.InvokeAsync<DealershipModel>("saveFile", "download.xml", Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(xml)));

    }
}
